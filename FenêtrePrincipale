import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URI;
import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;

import java.util.HashMap;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

 // Remplace `your.package.name` par le vrai package

public class FenetrePrincipale extends JFrame {

    private CardLayout cardLayout;
    private JPanel mainPanel;
    private int idUtilisateurConnecte;

    private String roleUtilisateurConnecte;

    private JComboBox<Utilisateur> comboSpecialistes;
    public FenetrePrincipale(String nom, String prenom, String email, String role, String specialisation, int idUtilisateur) {
    //    this.idUtilisateurConnecte = idUtilisateur;
        this.idUtilisateurConnecte = idUtilisateur;
        this.roleUtilisateurConnecte = role;
        setTitle("Application - Rendez-vous sp√©cialiste");
        setSize(800, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // === Barre de menu ===
        JMenuBar menuBar = new JMenuBar();
        JMenu menuInfos = new JMenu("Infos");
        JMenu menuRDV = new JMenu("Prendre rendez-vous");
        JMenu menuCompte = new JMenu("Votre compte");
        JMenu menuMesRDV = new JMenu("Mes rendez-vous");
        JMenu menuRecherche = new JMenu("Recherche");
        menuBar.add(menuRecherche);


        menuBar.add(menuInfos);
        menuBar.add(menuRDV);
        menuBar.add(menuCompte);
        menuBar.add(menuMesRDV);
        setJMenuBar(menuBar);

        // === Panels ===
        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);

        JPanel panelInfos = createInfosPanel();
        JPanel panelPrendreRDV = createPrendreRDVPanel();
        JPanel panelCompte = createComptePanel(nom, prenom, email, role, specialisation);
        JPanel panelMesRDV = createMesRDVPanel();

        mainPanel.add(panelInfos, "Infos");
        mainPanel.add(panelPrendreRDV, "RDV");
        mainPanel.add(panelCompte, "Compte");
        mainPanel.add(panelMesRDV, "MesRDV");

        add(mainPanel);

        // === Listeners pour menus ===
        menuInfos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cardLayout.show(mainPanel, "Infos");
            }
        });

        menuRDV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cardLayout.show(mainPanel, "RDV");
            }
        });

        menuCompte.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cardLayout.show(mainPanel, "Compte");
            }
        });

        menuMesRDV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                // Supprimer l'ancien panel
                mainPanel.remove(mainPanel.getComponent(3)); // si c'est le 4e ajout√© (index 3)

                // Cr√©er un nouveau panel √† jour
                JPanel nouveauPanelMesRDV = createMesRDVPanel();
                mainPanel.add(nouveauPanelMesRDV, "MesRDV");

                // Afficher le panel
                cardLayout.show(mainPanel, "MesRDV");
                mainPanel.revalidate();
                mainPanel.repaint();
            }
        });
        menuRecherche.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JPanel recherchePanel = createRecherchePanel();
                mainPanel.remove(mainPanel.getComponent(4)); // ou ajuste l'index si besoin
                mainPanel.add(recherchePanel, "Recherche");
                cardLayout.show(mainPanel, "Recherche");
                mainPanel.revalidate();
                mainPanel.repaint();
            }
        });
        mainPanel.add(createRecherchePanel(), "Recherche");



        setVisible(true);
    }

    private JPanel createInfosPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(new Color(245, 255, 250));

        JLabel titre = new JLabel("Bienvenue sur l'application de prise de rendez-vous", SwingConstants.CENTER);
        titre.setFont(new Font("Serif", Font.BOLD, 20));
        titre.setBorder(BorderFactory.createEmptyBorder(20, 0, 10, 0));

        JTextArea infos = new JTextArea(
                "Notre application vous permet de consulter les disponibilit√©s des sp√©cialistes, " +
                        "de prendre rendez-vous rapidement et de suivre votre historique m√©dical.\n\n" +
                        "Voici quelques-uns de nos sp√©cialistes :\n\n" +
                        "üîπ Dr. Marie Dupont - Cardiologue\n" +
                        "üîπ Dr. Ahmed Benali - Dermatologue\n" +
                        "üîπ Dr. Sophie Lambert - P√©diatre\n" +
                        "üîπ Dr. Jean Durand - Psychologue\n" +
                        "üîπ Dr. Clara Nguyen - Gastro-ent√©rologue\n"
        );
        infos.setFont(new Font("SansSerif", Font.PLAIN, 14));
        infos.setEditable(false);
        infos.setBackground(panel.getBackground());
        infos.setBorder(BorderFactory.createEmptyBorder(10, 30, 30, 30));

        panel.add(titre, BorderLayout.NORTH);
        panel.add(infos, BorderLayout.CENTER);

        return panel;
    }

    private JPanel createPrendreRDVPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(new Color(255, 250, 240));

        JLabel titre = new JLabel("üìÖ Prise de rendez-vous", SwingConstants.CENTER);
        titre.setFont(new Font("Arial", Font.BOLD, 18));
        panel.add(titre, BorderLayout.NORTH);

        // === Panel qui affichera les cr√©neaux ===
        JPanel creneauPanel = new JPanel();
        panel.add(new JScrollPane(creneauPanel), BorderLayout.CENTER);

        try {
            Connection conn = ConnexionBDD.getConnexion();
            CreneauDAO creneauDAO = new CreneauDAO(conn);
            UtilisateurDAO userDao = new UtilisateurDAO(conn);

            // === ComboBox des sp√©cialistes ===
            comboSpecialistes = new JComboBox<>();
            for (Utilisateur u : userDao.getSpecialistes()) {
                comboSpecialistes.addItem(u);
            }

            comboSpecialistes.addActionListener(e -> {
                Utilisateur selected = (Utilisateur) comboSpecialistes.getSelectedItem();
                if (selected != null) {
                    // G√©n√®re les cr√©neaux (si non encore pr√©sents)
                    creneauDAO.genererCreneauxSiManquants(selected.getId());
                    // Affiche les cr√©neaux du sp√©cialiste s√©lectionn√©
                    afficherCreneaux(selected.getId(), creneauPanel, creneauDAO);
                }
            });

            panel.add(comboSpecialistes, BorderLayout.SOUTH);

            if (roleUtilisateurConnecte.equalsIgnoreCase("admin")) {
                panel.add(Box.createVerticalStrut(20));
                panel.add(createGraphiqueOccupationPanel());
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            panel.add(new JLabel("Erreur de chargement des sp√©cialistes."), BorderLayout.CENTER);
        }

        return panel;
    }
    private void afficherCreneaux(int idSpecialiste, JPanel cible, CreneauDAO creneauDAO) {
        cible.removeAll();
        cible.setLayout(new GridLayout(5, 5, 10, 10)); // 5 jours √ó 5 cr√©neaux

        List<Creneau> creneaux = creneauDAO.getCreneauxDisponiblesPour(idSpecialiste);

        for (Creneau c : creneaux) {
            JButton btn = new JButton(c.getDateHeure().toLocalDate() + " " + c.getDateHeure().toLocalTime());
            btn.setBackground(c.isDisponible() ? Color.GREEN : Color.RED);
            btn.setEnabled(c.isDisponible());

            btn.addActionListener(e -> {
                int confirm = JOptionPane.showConfirmDialog(null, "Confirmer ce rendez-vous ?");
                if (confirm == JOptionPane.YES_OPTION) {
                    creneauDAO.reserverCreneau(c.getId(), idUtilisateurConnecte);
                    afficherCreneaux(idSpecialiste, cible, creneauDAO); // mise √† jour
                }
            });

            cible.add(btn);
        }

        cible.revalidate();
        cible.repaint();
    }

    private JPanel createComptePanel(String nom, String prenom, String email, String role, String specialisation) {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(new Color(240, 248, 255));

        JLabel titre = new JLabel("üë§ Mon Compte");
        titre.setFont(new Font("Arial", Font.BOLD, 18));
        titre.setAlignmentX(Component.CENTER_ALIGNMENT);

        panel.add(Box.createVerticalStrut(20));
        panel.add(titre);
        panel.add(Box.createVerticalStrut(10));
        panel.add(new JLabel("Nom : " + nom));
        panel.add(new JLabel("Pr√©nom : " + prenom));
        panel.add(new JLabel("Email : " + email));
        panel.add(new JLabel("R√¥le : " + role));
        panel.add(new JLabel("Sp√©cialisation : " + (role.equals("specialiste") ? specialisation : "N/A")));

        panel.add(Box.createVerticalStrut(20));

        JButton deconnexionBtn = new JButton("D√©connexion");
        deconnexionBtn.setAlignmentX(Component.CENTER_ALIGNMENT);
        deconnexionBtn.addActionListener(e -> {
            int confirm = JOptionPane.showConfirmDialog(null, "Voulez-vous vous d√©connecter ?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                dispose(); // Ferme la fen√™tre actuelle
                new FenetreConnexion(); // Ouvre la fen√™tre de connexion
            }
        });
        panel.add(deconnexionBtn);







        panel.add(deconnexionBtn);
        return panel;
    }
    private JPanel createRecherchePanel() {
        // Si l'utilisateur est un patient ‚Üí il cherche des cr√©neaux disponibles
        if (roleUtilisateurConnecte.equalsIgnoreCase("patient")) {
            return createRecherchePatientPanel();
        }

        // Si l'utilisateur est un sp√©cialiste ‚Üí il cherche ses patients et leurs RDV
        if (roleUtilisateurConnecte.equalsIgnoreCase("specialiste")) {
            return createRechercheSpecialistePanel();
        }

        // Sinon (par pr√©caution, ou si un r√¥le inconnu)
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
        JLabel label = new JLabel("R√¥le utilisateur inconnu ou non pris en charge.");
        label.setHorizontalAlignment(SwingConstants.CENTER);
        panel.add(label, BorderLayout.CENTER);
        return panel;
    }
    private JPanel createRechercheSpecialistePanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(new Color(245, 250, 255));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel titre = new JLabel("üîç Rechercher un patient");
        titre.setFont(new Font("Arial", Font.BOLD, 18));
        titre.setAlignmentX(Component.CENTER_ALIGNMENT);
        panel.add(titre);
        panel.add(Box.createVerticalStrut(10));

        JPanel formPanel = new JPanel(new FlowLayout());
        JTextField searchField = new JTextField(20);
        JButton searchBtn = new JButton("Rechercher");
        formPanel.add(new JLabel("Nom, pr√©nom ou email :"));
        formPanel.add(searchField);
        formPanel.add(searchBtn);
        panel.add(formPanel);

        JComboBox<Utilisateur> listePatients = new JComboBox<>();
        panel.add(Box.createVerticalStrut(10));
        panel.add(listePatients);

        JTextArea resultArea = new JTextArea(10, 60);
        resultArea.setEditable(false);
        JScrollPane scroll = new JScrollPane(resultArea);
        panel.add(scroll);

        JPanel mailPanel = new JPanel();
        JButton mailBtn = new JButton("Envoyer un mail");
        mailBtn.setVisible(false);
        mailPanel.add(mailBtn);
        panel.add(mailPanel);

        // Action du bouton "Rechercher"
        searchBtn.addActionListener(e -> {
            String critere = searchField.getText().trim();
            listePatients.removeAllItems();
            resultArea.setText("");
            mailBtn.setVisible(false);

            if (critere.isEmpty()) {
                resultArea.setText("‚ùå Veuillez entrer un nom, pr√©nom ou email.");
                return;
            }

            try {
                Connection conn = ConnexionBDD.getConnexion();
                UtilisateurDAO userDao = new UtilisateurDAO(conn);
                List<Utilisateur> patients = userDao.chercherPatientsPourSpecialiste(idUtilisateurConnecte, critere);

                if (patients.isEmpty()) {
                    resultArea.setText("Aucun patient trouv√©.");
                } else {
                    for (Utilisateur u : patients) {
                        listePatients.addItem(u);
                    }
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                resultArea.setText("‚ùå Erreur de recherche en base.");
            }
        });

        // Action quand on s√©lectionne un patient
        listePatients.addActionListener(e -> {
            Utilisateur patient = (Utilisateur) listePatients.getSelectedItem();
            if (patient == null) return;

            resultArea.setText("");
            mailBtn.setVisible(true);
            mailBtn.setActionCommand(patient.toString());

            try {
                Connection conn = ConnexionBDD.getConnexion();
                CreneauDAO dao = new CreneauDAO(conn);
                List<String> infos = dao.rechercherPatientEtRendezVous(idUtilisateurConnecte, patient.getEmail());

                for (String ligne : infos) {
                    if (!ligne.startsWith("EMAIL:")) {
                        resultArea.append(ligne + "\n");
                    } else {
                        String email = ligne.substring(6);
                        mailBtn.addActionListener(evt -> {
                            try {
                                Desktop.getDesktop().mail(new URI("mailto:" + email));
                            } catch (Exception ex) {
                                JOptionPane.showMessageDialog(panel, "Erreur lors de l'ouverture du mail.");
                            }
                        });
                    }
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                resultArea.setText("‚ùå Erreur lors du chargement des informations.");
            }
        });

        return panel;
    }




    private JPanel createRecherchePatientPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(new Color(245, 250, 255));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel titre = new JLabel("üîé Rechercher des cr√©neaux disponibles");
        titre.setFont(new Font("Arial", Font.BOLD, 18));
        titre.setAlignmentX(Component.CENTER_ALIGNMENT);
        panel.add(titre);
        panel.add(Box.createVerticalStrut(15));

        JPanel formPanel = new JPanel(new FlowLayout());

        JLabel specialiteLabel = new JLabel("Sp√©cialit√© :");
        String[] specialites = { "Cardiologue", "Dermatologue", "P√©diatre", "Psychologue", "Gastro-ent√©rologue" };
        JComboBox<String> specialiteBox = new JComboBox<>(specialites);

        JLabel dateLabel = new JLabel("Date (aaaa-mm-jj) :");
        JTextField dateField = new JTextField(10);

        JButton rechercherBtn = new JButton("Rechercher");

        formPanel.add(specialiteLabel);
        formPanel.add(specialiteBox);
        formPanel.add(dateLabel);
        formPanel.add(dateField);
        formPanel.add(rechercherBtn);

        panel.add(formPanel);

        JPanel resultPanel = new JPanel();
        resultPanel.setLayout(new BoxLayout(resultPanel, BoxLayout.Y_AXIS));
        JScrollPane scrollPane = new JScrollPane(resultPanel);
        panel.add(scrollPane);

        // Action du bouton Rechercher
        rechercherBtn.addActionListener(e -> {
            resultPanel.removeAll();

            String specialite = (String) specialiteBox.getSelectedItem();
            String dateStr = dateField.getText();

            try {
                LocalDate date = LocalDate.parse(dateStr);
                Connection conn = ConnexionBDD.getConnexion();
                CreneauDAO dao = new CreneauDAO(conn);
                List<Creneau> resultats = dao.rechercherCreneauxComplet(specialite, date);

                if (resultats.isEmpty()) {
                    resultPanel.add(new JLabel("Aucun cr√©neau disponible pour ce jour."));
                } else {
                    for (Creneau c : resultats) {
                        JPanel ligne = new JPanel(new FlowLayout(FlowLayout.LEFT));
                        ligne.setMaximumSize(new Dimension(700, 40));
                        String texte = "üìÖ " + c.getDateHeure() + " - Dr. " +
                                c.getPrenomSpecialiste() + " " + c.getNomSpecialiste() +
                                " (" + c.getSpecialisation() + ")";
                        JLabel lbl = new JLabel(texte);

                        JButton reserver = new JButton("R√©server");
                        reserver.setBackground(Color.GREEN);

                        reserver.addActionListener(ev -> {
                            int confirm = JOptionPane.showConfirmDialog(panel, "Confirmer la r√©servation ?");
                            if (confirm == JOptionPane.YES_OPTION) {
                                dao.reserverCreneau(c.getId(), idUtilisateurConnecte);
                                JOptionPane.showMessageDialog(panel, "Cr√©neau r√©serv√© !");
                                rechercherBtn.doClick(); // Recharge la recherche
                            }
                        });

                        ligne.add(lbl);
                        ligne.add(reserver);
                        resultPanel.add(ligne);
                    }
                }

                resultPanel.revalidate();
                resultPanel.repaint();

            } catch (Exception ex) {
                resultPanel.removeAll();
                resultPanel.add(new JLabel("‚ùå Erreur : Veuillez entrer une date au format aaaa-mm-jj"));
                resultPanel.revalidate();
                resultPanel.repaint();
            }
        });

        return panel;
    }


    private JPanel createMesRDVPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(new Color(255, 245, 238));

        JLabel titre = new JLabel("üìÜ Mes rendez-vous");
        titre.setFont(new Font("Arial", Font.BOLD, 18));
        titre.setAlignmentX(Component.CENTER_ALIGNMENT);

        panel.add(Box.createVerticalStrut(20));
        panel.add(titre);
        panel.add(Box.createVerticalStrut(10));

        try {
            Connection conn = ConnexionBDD.getConnexion();
            CreneauDAO creneauDAO = new CreneauDAO(conn);

            List<String> rdvs = creneauDAO.getRendezVousPourUtilisateur(idUtilisateurConnecte, roleUtilisateurConnecte); // utilise "role"

            if (rdvs.isEmpty()) {
                panel.add(new JLabel("Aucun rendez-vous trouv√©."));
            } else {
                for (String rdv : rdvs) {
                    JLabel label = new JLabel(rdv);
                    label.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
                    panel.add(label);
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
            panel.add(new JLabel("Erreur lors du chargement des rendez-vous."));
        }

        return panel;
    }

    private JPanel createGraphiqueOccupationPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());

        try {
            Connection conn = ConnexionBDD.getConnexion();
            CreneauDAO dao = new CreneauDAO(conn);
            Map<String, Integer[]> stats = dao.getTauxOccupationParSpecialiste();

            DefaultCategoryDataset dataset = new DefaultCategoryDataset();

            for (Map.Entry<String, Integer[]> entry : stats.entrySet()) {
                String nom = entry.getKey();
                Integer[] valeurs = entry.getValue();
                dataset.addValue(valeurs[0], "Disponibles", nom);
                dataset.addValue(valeurs[1], "R√©serv√©s", nom);
            }

            JFreeChart chart = ChartFactory.createBarChart(
                    "Taux d'occupation des sp√©cialistes",
                    "Sp√©cialiste",
                    "Nombre de cr√©neaux",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true, true, false
            );

            ChartPanel chartPanel = new ChartPanel(chart);
            panel.add(chartPanel, BorderLayout.CENTER);

        } catch (Exception e) {
            panel.add(new JLabel("Erreur lors de la g√©n√©ration du graphique"));
            e.printStackTrace();
        }

        return panel;
    }


}
